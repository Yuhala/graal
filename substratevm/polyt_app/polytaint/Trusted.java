/*
* This file was generated by PolyTaint Truffle instrument - ERO project 2022
*
* The MIT License (MIT)
* Copyright (c) 2022 Peterson Yuhala
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software
* and associated documentation files (the "Software"), to deal in the Software without restriction,
* including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
* subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all copies or substantial
* portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
* TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


package polytaint;
import org.graalvm.nativeimage.CurrentIsolate;
import org.graalvm.nativeimage.IsolateThread;
import org.graalvm.nativeimage.c.function.CEntryPoint;
import org.graalvm.polyglot.*;
import org.graalvm.polyglot.proxy.*;
import org.graalvm.polyglot.*;



public class Trusted {

    public static Context globalContext;

    static {
        try{
            globalContext = Context.newBuilder().allowAllAccess(true).build();
        }
        catch(Exception e){

        }
    }

    public static MultiFunctionIn multiFunc = new MultiFunctionIn(globalContext);

    public static void main(String[] args) {
        System.out.println("Hello from trusted dummy main!!");
    }
    public static void poly_2(){
        System.out.println("Hello from poly_2..");
        //globalContext.eval("js","function poly_2_wrapper(m){funcD = m.funcD;funcA = m.funcA;funcN = m.funcN;sayHello = m.sayHello;function poly_2() {    var poly2_secInt = Polyglot.eval(\"secL\", \"sInt(222)\");    console.log('poly1_secInt: ' + poly2_secInt);}poly_2();}poly_2_wrapper;").execute(multiFunc);
    }

    public static int funcA(int param1){
        Param_funcA params = new Param_funcA(param1);
        return globalContext.eval("js","function funcA_wrapper(m,p){poly_2 = m.poly_2;funcD = m.funcD;funcN = m.funcN;sayHello = m.sayHello;param1 = p.param1;function funcA(paramA) {    var sec_int_a = Polyglot.eval(\"secL\", \"sInt(10)\");    var resC = 123 + 456 * 789 / 111 - sec_int_a;    var indirect_sec_int = 2 + funcN(5, 2);    dummy = 123;    console.log('dummy variable in funcA is : ' + dummy);    return indirect_sec_int;}funcA(param1);}funcA_wrapper;").execute(multiFunc,params).asInt();
    }

    public static int funcD(int param1){
        return funcD_proxy(param1);
    }

    public static int funcN(int param1, int param2){
        return funcN_proxy(param1, param2);
    }

    public static void sayHello(){
        sayHello_proxy();
    }

    @CEntryPoint(name = "poly_2_entry")
    public static void poly_2_entry(IsolateThread thread){
        System.out.println("Hello from poly_2 entry..");
        poly_2();
    }

    @CEntryPoint(name = "funcA_entry")
    public static int funcA_entry(IsolateThread thread, int param1){
        return funcA(param1);
    }

    public static native int funcD_proxy(int param1);
    public static native int funcN_proxy(int param1, int param2);
    public static native void sayHello_proxy();
}
